Usage of matrix_divided function
================================

```matrix_divided``` functions works in a way to divide all
elements of a given matrix by a given divisor

Args:
	matrix (list): a list of integer/float lists of the same size
	div (int/float): an integer or float

Tests
=====

Arguments
==========
Must be called with 2 positional arguments
::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	
	with no arguments
	>>> matrix_divided()
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Matrix Elements Type
====================
must be a list of lists of integers or floats
::
	Correct types
	>>> matrix_divided([[4, 6.0, 8], [2, 3.33, 6], [0, 2, 4]], 3)
	[[1.33, 2.0, 2.67], [0.67, 1.11, 2.0], [0.0, 0.67, 1.33]]

	Mixed types
	>>> matrix_divided([[4, 6.0], [2, 6], [2, 'thur']], 2)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Matrix Size
============
must be of the same size
::
	>>> matrix_divided([[2, 2], [2, 3, 4]], 2)
	Traceback (most recent call last):
        TypeError: Each row of the matrix must have the same size

Divisor
=======
must be a number and not zero
::
	non-number (not float, integer)
	>>> matrix_divided([[2, 2], [4, 4]], 'g')
	Traceback (most recent call last):
        TypeError: div must be a number

	zero division
	>>> matrix_divided([[2, 2], [4, 4]], 0)
	Traceback (most recent call last):
        ZeroDivisionError: division by zero

	by float
	>>> matrix_divided([[4, 4], [6, 6]], 2.0)
	[[2.0, 2.0], [3.0, 3.0]]
 
End of tests
============
